{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lambda Function resource stack creation using Amplify CLI",
    "Parameters": {
        "CloudWatchRule": {
            "Type": "String",
            "Default" : "NONE",
            "Description" : " Schedule Expression"
        },
        "env": {
            "Type": "String"
        },
    
    
    
        "storagePartnerName": {
            "Type": "String",
            "Default": "storagePartnerName"
            },
        
        "storagePartnerArn": {
            "Type": "String",
            "Default": "storagePartnerArn"
            },
        
    
        
    
        "storageEntranceName": {
            "Type": "String",
            "Default": "storageEntranceName"
            },
        
        "storageEntranceArn": {
            "Type": "String",
            "Default": "storageEntranceArn"
            },
        
    
        
    
        "storageBillingName": {
            "Type": "String",
            "Default": "storageBillingName"
            },
        
        "storageBillingArn": {
            "Type": "String",
            "Default": "storageBillingArn"
            },
        
    
        
    
        "storageDailyReportName": {
            "Type": "String",
            "Default": "storageDailyReportName"
            },
        
        "storageDailyReportArn": {
            "Type": "String",
            "Default": "storageDailyReportArn"
            }
        
    
        
    
    },
    "Conditions": {
        "ShouldNotCreateEnvResources": {
            "Fn::Equals": [
                {
                    "Ref": "env"
                },
                "NONE"
            ]
        }
    },
    "Resources": {
        "LambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Metadata": {
            "aws:asset:path": "./src",
            "aws:asset:property": "Code"
          },
          "Properties": {
            "Handler": "index.handler",
            "FunctionName": {
                "Fn::If": [
                    "ShouldNotCreateEnvResources",
                    "dailyReport",
                    {

                        "Fn::Join": [
                            "",
                            [
                                "dailyReport",
                                "-",
                                {
                                    "Ref": "env"
                                }
                            ]
                        ]
                    }
                ]
            },
            "Environment": {
                "Variables" : {"ENV":{"Ref":"env"},"REGION":{"Ref":"AWS::Region"},"STORAGE_PARTNER_NAME":{"Ref":"storagePartnerName"},"STORAGE_PARTNER_ARN":{"Ref":"storagePartnerArn"},"STORAGE_ENTRANCE_NAME":{"Ref":"storageEntranceName"},"STORAGE_ENTRANCE_ARN":{"Ref":"storageEntranceArn"},"STORAGE_BILLING_NAME":{"Ref":"storageBillingName"},"STORAGE_BILLING_ARN":{"Ref":"storageBillingArn"},"STORAGE_DAILYREPORT_NAME":{"Ref":"storageDailyReportName"},"STORAGE_DAILYREPORT_ARN":{"Ref":"storageDailyReportArn"}}
            },
            "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
            "Runtime": "nodejs12.x",
            "Layers": [],
            "Timeout": "25"
          }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::If": [
                        "ShouldNotCreateEnvResources",
                        "gastroverifyLambdaRole50d4c420",
                        {

                            "Fn::Join": [
                                "",
                                [
                                    "gastroverifyLambdaRole50d4c420",
                                    "-",
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
            }
        }
        ,"lambdaexecutionpolicy": {
            "DependsOn": ["LambdaExecutionRole"],
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "lambda-execution-policy",
                "Roles": [{ "Ref": "LambdaExecutionRole" }],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action":["logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"],
                            "Resource": { "Fn::Sub" : [ "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*", { "region": {"Ref": "AWS::Region"},  "account": {"Ref": "AWS::AccountId"}, "lambda": {"Ref": "LambdaFunction"}} ]}
                        }
                    ]
                }
            }
        }
        ,"AmplifyResourcesPolicy": {
            "DependsOn": ["LambdaExecutionRole"],
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "amplify-lambda-execution-policy",
                "Roles": [{ "Ref": "LambdaExecutionRole" }],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{"Effect":"Allow","Action":["dynamodb:Put*","dynamodb:Create*","dynamodb:BatchWriteItem","dynamodb:Get*","dynamodb:BatchGetItem","dynamodb:List*","dynamodb:Describe*","dynamodb:Scan","dynamodb:Query","dynamodb:Update*","dynamodb:RestoreTable*","dynamodb:Delete*"],"Resource":[{"Ref":"storagePartnerArn"},{"Fn::Join":["/",[{"Ref":"storagePartnerArn"},"index/*"]]}]},{"Effect":"Allow","Action":["dynamodb:Put*","dynamodb:Create*","dynamodb:BatchWriteItem","dynamodb:Get*","dynamodb:BatchGetItem","dynamodb:List*","dynamodb:Describe*","dynamodb:Scan","dynamodb:Query","dynamodb:Update*","dynamodb:RestoreTable*","dynamodb:Delete*"],"Resource":[{"Ref":"storageEntranceArn"},{"Fn::Join":["/",[{"Ref":"storageEntranceArn"},"index/*"]]}]},{"Effect":"Allow","Action":["dynamodb:Put*","dynamodb:Create*","dynamodb:BatchWriteItem","dynamodb:Get*","dynamodb:BatchGetItem","dynamodb:List*","dynamodb:Describe*","dynamodb:Scan","dynamodb:Query","dynamodb:Update*","dynamodb:RestoreTable*","dynamodb:Delete*"],"Resource":[{"Ref":"storageBillingArn"},{"Fn::Join":["/",[{"Ref":"storageBillingArn"},"index/*"]]}]},{"Effect":"Allow","Action":["dynamodb:Put*","dynamodb:Create*","dynamodb:BatchWriteItem","dynamodb:Get*","dynamodb:BatchGetItem","dynamodb:List*","dynamodb:Describe*","dynamodb:Scan","dynamodb:Query","dynamodb:Update*","dynamodb:RestoreTable*","dynamodb:Delete*"],"Resource":[{"Ref":"storageDailyReportArn"},{"Fn::Join":["/",[{"Ref":"storageDailyReportArn"},"index/*"]]}]}]
                }
            }
        }
        
        
        
        ,"CloudWatchEvent": {
            "Type" : "AWS::Events::Rule",
            "Properties":{
                "Description" : "Schedule rule for Lambda",
                "ScheduleExpression" : {
                    "Ref" : "CloudWatchRule"
                },
                "State": "ENABLED",
                "Targets": [{
                    "Arn": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
                    "Id":{
                        "Ref" : "LambdaFunction"
                    }
                }]
            }
        }
        ,"PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFunction"
                    },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["CloudWatchEvent", "Arn"] }
            }
        }
        
    },
    "Outputs": {
        "Name": {
            "Value": {
                "Ref": "LambdaFunction"
            }
        },
        "Arn": {
            "Value": {"Fn::GetAtt": ["LambdaFunction", "Arn"]}
        },
        "Region": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "LambdaExecutionRole": {
            "Value": {
                "Ref": "LambdaExecutionRole"
            }
        }
        
        ,"CloudWatchEventRule": {
            "Value" :{
                "Ref" : "CloudWatchEvent"
            }
        }
        
    }
}
